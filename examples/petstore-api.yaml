openapi: 3.0.0
info:
  title: Pet Store API
  description: A simple pet store API for testing MCP generation
  version: 1.0.0
  contact:
    name: API Support
    email: support@petstore.example.com

servers:
  - url: https://petstore.example.com/api/v1
    description: Production server

tags:
  - name: pets
    description: Pet management operations

paths:
  /pets:
    get:
      summary: List all pets
      description: Returns a list of all pets in the store
      operationId: listPets
      tags:
        - pets
      parameters:
        - name: limit
          in: query
          description: Maximum number of pets to return
          required: false
          schema:
            type: integer
            default: 10
            minimum: 1
            maximum: 100
        - name: status
          in: query
          description: Filter by pet status
          required: false
          schema:
            type: string
            enum: [available, pending, sold]
      responses:
        '200':
          description: Successful response
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/Pet'
        '400':
          description: Invalid request

    post:
      summary: Create a new pet
      description: Add a new pet to the store
      operationId: createPet
      tags:
        - pets
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/NewPet'
      responses:
        '201':
          description: Pet created successfully
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Pet'
        '400':
          description: Invalid input

  /pets/{petId}:
    get:
      summary: Get a pet by ID
      description: Returns detailed information about a specific pet
      operationId: getPetById
      tags:
        - pets
      parameters:
        - name: petId
          in: path
          description: ID of the pet to retrieve
          required: true
          schema:
            type: integer
            format: int64
      responses:
        '200':
          description: Successful response
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Pet'
        '404':
          description: Pet not found

    put:
      summary: Update a pet
      description: Update an existing pet's information
      operationId: updatePet
      tags:
        - pets
      parameters:
        - name: petId
          in: path
          description: ID of the pet to update
          required: true
          schema:
            type: integer
            format: int64
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/NewPet'
      responses:
        '200':
          description: Pet updated successfully
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Pet'
        '404':
          description: Pet not found

    delete:
      summary: Delete a pet
      description: Remove a pet from the store
      operationId: deletePet
      tags:
        - pets
      parameters:
        - name: petId
          in: path
          description: ID of the pet to delete
          required: true
          schema:
            type: integer
            format: int64
      responses:
        '204':
          description: Pet deleted successfully
        '404':
          description: Pet not found

components:
  schemas:
    Pet:
      type: object
      required:
        - id
        - name
        - status
      properties:
        id:
          type: integer
          format: int64
          description: Unique identifier for the pet
        name:
          type: string
          description: Name of the pet
        category:
          type: string
          description: Category of the pet (e.g., dog, cat, bird)
        status:
          type: string
          enum: [available, pending, sold]
          description: Current status of the pet
        photoUrls:
          type: array
          items:
            type: string
          description: URLs of pet photos
        tags:
          type: array
          items:
            type: string
          description: Tags associated with the pet

    NewPet:
      type: object
      required:
        - name
      properties:
        name:
          type: string
          description: Name of the pet
        category:
          type: string
          description: Category of the pet
        status:
          type: string
          enum: [available, pending, sold]
          default: available
          description: Initial status of the pet
        photoUrls:
          type: array
          items:
            type: string
          description: URLs of pet photos
        tags:
          type: array
          items:
            type: string
          description: Tags for the pet

  securitySchemes:
    apiKey:
      type: apiKey
      name: X-API-Key
      in: header
      description: API key for authentication

security:
  - apiKey: []
